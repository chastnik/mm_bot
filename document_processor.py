"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""
import os
import requests
from typing import List, Dict, Any, Optional
from urllib.parse import urljoin, urlparse
import PyPDF2
from docx import Document
from openpyxl import load_workbook
from striprtf.striprtf import rtf_to_text
from bs4 import BeautifulSoup
import base64
import json

class DocumentProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, confluence_config):
        self.confluence_config = confluence_config
        self.supported_formats = ['.pdf', '.docx', '.doc', '.xlsx', '.rtf']
    
    def process_documents(self, documents: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        
        Args:
            documents: –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–ø–µ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        """
        processed_docs = []
        
        for doc in documents:
            try:
                if doc['type'] == 'file':
                    processed_doc = self._process_file(doc)
                elif doc['type'] == 'confluence':
                    processed_doc = self._process_confluence_url(doc)
                else:
                    continue
                    
                if processed_doc:
                    processed_docs.append(processed_doc)
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc.get('name', 'unknown')}: {str(e)}")
                
        return processed_docs
    
    def _process_file(self, doc: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞"""
        file_name = doc.get('name', '')
        file_data = doc.get('data', b'')
        
        if not file_data:
            return None
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        _, ext = os.path.splitext(file_name.lower())
        
        if ext == '.pdf':
            text = self._extract_from_pdf(file_data)
        elif ext == '.docx':
            text = self._extract_from_docx(file_data)
        elif ext == '.doc':
            text = self._extract_from_doc(file_data)
        elif ext == '.xlsx':
            text = self._extract_from_xlsx(file_data)
        elif ext == '.rtf':
            text = self._extract_from_rtf(file_data)
        else:
            print(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {ext}")
            return None
            
        return {
            'name': file_name,
            'type': 'file',
            'format': ext,
            'text': text,
            'pages': self._count_pages(text)
        }
    
    def _extract_from_pdf(self, file_data: bytes) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–∞"""
        try:
            from io import BytesIO
            pdf_file = BytesIO(file_data)
            pdf_reader = PyPDF2.PdfReader(pdf_file)
            
            text = ""
            for page_num, page in enumerate(pdf_reader.pages, 1):
                page_text = page.extract_text()
                text += f"\n--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num} ---\n{page_text}\n"
                
            return text
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF: {str(e)}")
            return ""
    
    def _extract_from_docx(self, file_data: bytes) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ DOCX —Ñ–∞–π–ª–∞"""
        try:
            from io import BytesIO
            doc_file = BytesIO(file_data)
            doc = Document(doc_file)
            
            text = ""
            page_num = 1
            
            for paragraph in doc.paragraphs:
                if paragraph.text.strip():
                    text += f"{paragraph.text}\n"
                    
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü
            for table in doc.tables:
                text += "\n--- –¢–∞–±–ª–∏—Ü–∞ ---\n"
                for row in table.rows:
                    row_text = []
                    for cell in row.cells:
                        row_text.append(cell.text.strip())
                    text += " | ".join(row_text) + "\n"
                text += "--- –ö–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã ---\n"
                
            return text
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX: {str(e)}")
            return ""

    def _extract_from_doc(self, file_data: bytes) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ DOC —Ñ–∞–π–ª–∞"""
        try:
            import docx2txt
            from io import BytesIO
            
            doc_file = BytesIO(file_data)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, —Ç–∞–∫ –∫–∞–∫ docx2txt —Ç—Ä–µ–±—É–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            import tempfile
            with tempfile.NamedTemporaryFile(suffix='.doc', delete=False) as temp_file:
                temp_file.write(file_data)
                temp_file_path = temp_file.name
            
            try:
                text = docx2txt.process(temp_file_path)
                return text or ""
            finally:
                import os
                if os.path.exists(temp_file_path):
                    os.remove(temp_file_path)
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOC: {str(e)}")
            return ""
    
    def _extract_from_xlsx(self, file_data: bytes) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ XLSX —Ñ–∞–π–ª–∞"""
        try:
            from io import BytesIO
            excel_file = BytesIO(file_data)
            workbook = load_workbook(excel_file, data_only=True)
            
            text = ""
            
            for sheet_name in workbook.sheetnames:
                sheet = workbook[sheet_name]
                text += f"\n--- –õ–∏—Å—Ç: {sheet_name} ---\n"
                
                for row in sheet.iter_rows():
                    row_data = []
                    for cell in row:
                        if cell.value is not None:
                            row_data.append(str(cell.value))
                        else:
                            row_data.append("")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                    if any(cell_data.strip() for cell_data in row_data):
                        text += " | ".join(row_data) + "\n"
                        
            return text
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ XLSX: {str(e)}")
            return ""
    
    def _extract_from_rtf(self, file_data: bytes) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ RTF —Ñ–∞–π–ª–∞"""
        try:
            rtf_content = file_data.decode('utf-8')
            text = rtf_to_text(rtf_content)
            return text
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ RTF: {str(e)}")
            return ""
    
    def _process_confluence_url(self, doc: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ Confluence —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–º –æ–±—Ö–æ–¥–æ–º –¥–æ—á–µ—Ä–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏ —Ñ–∞–π–ª–æ–≤"""
        url = doc.get('url', '')
        
        if not url:
            return None
            
        try:
            print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é Confluence —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ URL
            page_id = self._resolve_page_id(url)
            if not page_id:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è URL: {url}")
                return None
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_id}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            main_page_content, main_page_title = self._fetch_confluence_page_by_id(page_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
            all_pages = self._get_all_child_pages_recursive(page_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            attachments = self._get_page_attachments(page_id)
            
            all_content = f"--- –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê: {main_page_title} ---\n{main_page_content}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –ò –∏—Ö –≤–ª–æ–∂–µ–Ω–∏–π
            all_child_attachments = []
            for page_info in all_pages:
                child_content, child_title = self._fetch_confluence_page_by_id(page_info['id'])
                level_indent = "  " * page_info['level']  # –û—Ç—Å—Ç—É–ø –¥–ª—è –ø–æ–∫–∞–∑–∞ —É—Ä–æ–≤–Ω—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
                all_content += f"\n--- {level_indent}–î–û–ß–ï–†–ù–Ø–Ø –°–¢–†–ê–ù–ò–¶–ê (—É—Ä–æ–≤–µ–Ω—å {page_info['level']}): {child_title} ---\n{child_content}\n"
                
                # –í–ê–ñ–ù–û: –ü–æ–ª—É—á–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è —Å –∫–∞–∂–¥–æ–π –¥–æ—á–µ—Ä–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                child_attachments = self._get_page_attachments(page_info['id'])
                for child_attachment in child_attachments:
                    child_attachment['source_page'] = child_title  # –ü–æ–º–µ—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
                    all_child_attachments.append(child_attachment)
                    print(f"üìé –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –Ω–∞ –¥–æ—á–µ—Ä–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ '{child_title}': {child_attachment['title']}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for attachment in attachments:
                file_content = self._extract_attachment_content(attachment)
                if file_content:
                    all_content += f"\n--- –í–õ–û–ñ–ï–ù–ù–´–ô –§–ê–ô–õ (–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞): {attachment['title']} ---\n{file_content}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –¥–æ—á–µ—Ä–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            for attachment in all_child_attachments:
                file_content = self._extract_attachment_content(attachment)
                if file_content:
                    source_page = attachment.get('source_page', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')
                    all_content += f"\n--- –í–õ–û–ñ–ï–ù–ù–´–ô –§–ê–ô–õ (—Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã '{source_page}'): {attachment['title']} ---\n{file_content}\n"
            
            total_pages = len(all_pages) + 1
            total_attachments = len(attachments) + len(all_child_attachments)
            main_attachments_count = len(attachments)
            child_attachments_count = len(all_child_attachments)
            
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ + {len(all_pages)} –¥–æ—á–µ—Ä–Ω–∏—Ö + {main_attachments_count} —Ñ–∞–π–ª–æ–≤ (–≥–ª–∞–≤–Ω–∞—è) + {child_attachments_count} —Ñ–∞–π–ª–æ–≤ (–¥–æ—á–µ—Ä–Ω–∏–µ)")
            
            return {
                'name': f"Confluence: {main_page_title} (+ {len(all_pages)} –¥–æ—á–µ—Ä–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü + {total_attachments} —Ñ–∞–π–ª–æ–≤)",
                'type': 'confluence',
                'url': url,
                'text': all_content,
                'pages': total_pages,
                'child_pages_count': len(all_pages),
                'attachments_count': total_attachments,
                'main_attachments_count': main_attachments_count,
                'child_attachments_count': child_attachments_count
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Confluence —Å—Ç—Ä–∞–Ω–∏—Ü—ã {url}: {str(e)}")
            return None
    
    def _resolve_page_id(self, url: str) -> Optional[str]:
        """–†–∞–∑—Ä–µ—à–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π URL Confluence –≤ –ø–æ–ª–Ω—ã–π ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Confluence
            if not self.confluence_config.username or not self.confluence_config.password:
                print("‚ö†Ô∏è –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Confluence –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥.")
                return self._fallback_resolve_page_id(url)
            
            auth = (self.confluence_config.username, self.confluence_config.password)
            
            # –î–ª—è URL –≤–∏–¥–∞ https://confluence.1solution.ru/x/E_7iGQ
            if '/x/' in url:
                tiny_id = url.split('/x/')[-1].split('/')[0]
                print(f"üîç –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π ID: {tiny_id}")
                
                # –ú–µ—Ç–æ–¥ 1: –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                try:
                    direct_url = f"{self.confluence_config.base_url}rest/api/content/{tiny_id}?expand=body.storage"
                    direct_response = requests.get(direct_url, auth=auth)
                    if direct_response.status_code == 200:
                        print(f"‚úÖ –ö–æ—Ä–æ—Ç–∫–∏–π ID {tiny_id} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –ø—Ä—è–º–æ–π ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                        return tiny_id
                except Exception as e:
                    print(f"üîç –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è: {str(e)}")
                
                # –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
                try:
                    found_page_id = None
                    start = 0
                    limit = 100
                    max_pages = 5  # –ú–∞–∫—Å–∏–º—É–º 500 —Å—Ç—Ä–∞–Ω–∏—Ü
                    
                    for page in range(max_pages):
                        search_url = f"{self.confluence_config.base_url}rest/api/content"
                        params = {
                            'type': 'page',
                            'limit': limit,
                            'start': start,
                            'expand': '_links'
                        }
                        
                        response = requests.get(search_url, auth=auth, params=params)
                        if response.status_code != 200:
                            break
                            
                        data = response.json()
                        results = data.get('results', [])
                        
                        if not results:  # –ù–µ—Ç –±–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü
                            break
                            
                        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã {start}-{start + len(results)} (–≤—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {data.get('size', 0)})")
                        
                        # –ò—â–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å matching tiny URL
                        for result in results:
                            tinyui = result.get('_links', {}).get('tinyui', '')
                            if f'/x/{tiny_id}' in tinyui:
                                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ tiny URL: {result['title']} (ID: {result['id']})")
                                found_page_id = result['id']
                                break
                        
                        if found_page_id:
                            break
                            
                        start += limit
                    
                    if found_page_id:
                        return found_page_id
                        
                except Exception as e:
                    print(f"üîç –ü–æ–∏—Å–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –Ω–µ —É–¥–∞–ª—Å—è: {str(e)}")
                
                # –ú–µ—Ç–æ–¥ 3: CQL –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–µ—Å–ª–∏ –∑–Ω–∞–µ–º)
                try:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ CQL –ø–æ–∏—Å–∫
                    search_url = f"{self.confluence_config.base_url}rest/api/content/search"
                    params = {
                        'cql': f'type=page',
                        'limit': 200,
                        'expand': '_links'
                    }
                    
                    response = requests.get(search_url, auth=auth, params=params)
                    if response.status_code == 200:
                        data = response.json()
                        results = data.get('results', [])
                        
                        print(f"üîç CQL –ø–æ–∏—Å–∫: –ø—Ä–æ–≤–µ—Ä—è—é {len(results)} —Å—Ç—Ä–∞–Ω–∏—Ü")
                        
                        for result in results:
                            tinyui = result.get('_links', {}).get('tinyui', '')
                            if f'/x/{tiny_id}' in tinyui:
                                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ CQL: {result['title']} (ID: {result['id']})")
                                return result['id']
                except Exception as e:
                    print(f"üîç CQL –ø–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è: {str(e)}")
                
                # –ú–µ—Ç–æ–¥ 4: –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –Ω–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                try:
                    all_pages_url = f"{self.confluence_config.base_url}rest/api/content"
                    params = {
                        'type': 'page',
                        'limit': 50,
                        'expand': 'metadata,space'
                    }
                    
                    response = requests.get(all_pages_url, auth=auth, params=params)
                    if response.status_code == 200:
                        data = response.json()
                        
                        for page in data.get('results', []):
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ tiny_id
                            if tiny_id in str(page.get('_links', {})) or tiny_id in str(page.get('metadata', {})):
                                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ —Å–ø–∏—Å–∫–µ: {page['title']} (ID: {page['id']})")
                                return page['id']
                except Exception as e:
                    print(f"üîç –ü–æ–∏—Å–∫ –≤ —Å–ø–∏—Å–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ —É–¥–∞–ª—Å—è: {str(e)}")
                
                # –ú–µ—Ç–æ–¥ 5: –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö URL
                known_mappings = {
                    'E_7iGQ': '434302483',  # –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–≠–Ω–µ—Ä–≥–æ–°–±—ã—Ç
                    'YYjiGQ': '434276449',  # Easy Report
                }
                
                if tiny_id in known_mappings:
                    mapped_id = known_mappings[tiny_id]
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {tiny_id} -> {mapped_id}")
                    return mapped_id
                    
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö URL
            elif '/pages/' in url:
                return url.split('/pages/')[-1].split('/')[0]
            
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å ID –¥–ª—è URL: {url}")
            print("üí° –°–û–í–ï–¢: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø–æ–ª–Ω—ã–π URL –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞")
            return self._fallback_resolve_page_id(url)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è {url}: {str(e)}")
            return self._fallback_resolve_page_id(url)
    
    def _fallback_resolve_page_id(self, url: str) -> Optional[str]:
        """Fallback –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥ –¥–ª—è URL: {url}")
            
            # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö URL –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å tiny_id –∫–∞–∫ –µ—Å—Ç—å
            if '/x/' in url:
                tiny_id = url.split('/x/')[-1].split('/')[0]
                print(f"üéØ Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º {tiny_id} –∫–∞–∫ ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                return tiny_id
            
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö URL
            elif '/pages/' in url:
                return url.split('/pages/')[-1].split('/')[0]
            
            return None
            
        except Exception as e:
            print(f"‚ùå Fallback –º–µ—Ç–æ–¥ —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {str(e)}")
            return None

    def _fetch_confluence_page_by_id(self, page_id: str) -> tuple[str, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Confluence –ø–æ ID"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if not self.confluence_config.username or not self.confluence_config.password:
                error_msg = f"""
‚ùå CONFLUENCE –ù–ï –ù–ê–°–¢–†–û–ï–ù

–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ Confluence —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é:

1. –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:
   CONFLUENCE_USERNAME=your-email@company.com
   CONFLUENCE_PASSWORD=your-api-token

2. –°–æ–∑–¥–∞–π—Ç–µ API —Ç–æ–∫–µ–Ω:
   - –í–æ–π–¥–∏—Ç–µ –≤ https://id.atlassian.com/
   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Security ‚Üí API tokens
   - –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∫–∞–∫ CONFLUENCE_PASSWORD

üí° –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω—ã–π URL –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞:
   ‚úÖ https://confluence.1solution.ru/spaces/PROJECT/pages/123456/PageName
   ‚úÖ https://confluence.1solution.ru/x/ABC123

URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {self.confluence_config.base_url}pages/{page_id}

–ë–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ:
‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü
‚Ä¢ –ù–∞–π—Ç–∏ –¥–æ—á–µ—Ä–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã  
‚Ä¢ –°–∫–∞—á–∞—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
‚Ä¢ –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑

–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Confluence –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
                """
                print("‚ö†Ô∏è Confluence –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
                return error_msg.strip(), f"Confluence —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (ID: {page_id})"
            
            auth = (self.confluence_config.username, self.confluence_config.password)
            
            api_url = f"{self.confluence_config.base_url}rest/api/content/{page_id}?expand=body.storage"
            print(f"üîó –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {api_url}")
            
            response = requests.get(api_url, auth=auth)
            response.raise_for_status()
            
            data = response.json()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            title = data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            html_content = data['body']['storage']['value']
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {title}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HTML –≤ —Ç–µ–∫—Å—Ç
            soup = BeautifulSoup(html_content, 'html.parser')
            text = soup.get_text(separator='\n', strip=True)
            
            return text, title
            
        except Exception as e:
            error_details = str(e)
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_id}: {error_details}")
            
            # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            if "401" in error_details:
                error_msg = f"""
‚ùå –û–®–ò–ë–ö–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò (401)

–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Confluence:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CONFLUENCE_USERNAME (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å email)
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CONFLUENCE_PASSWORD (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å API —Ç–æ–∫–µ–Ω, –Ω–µ –ø–∞—Ä–æ–ª—å)
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ Confluence

URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {self.confluence_config.base_url}pages/{page_id}
                """
            elif "404" in error_details:
                error_msg = f"""
‚ùå –°–¢–†–ê–ù–ò–¶–ê –ù–ï –ù–ê–ô–î–ï–ù–ê (404)

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞
‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_id}
‚Ä¢ –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–∞–∫—Ä—ã—Ç–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ

üí° –°–û–í–ï–¢: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø–æ–ª–Ω—ã–π URL –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞:
   ‚úÖ https://confluence.1solution.ru/spaces/PROJECT/pages/123456/PageName
   ‚úÖ https://confluence.1solution.ru/x/ABC123
   ‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã URL

–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL: {self.confluence_config.base_url}pages/{page_id}
                """
            elif "403" in error_details:
                error_msg = f"""
‚ùå –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù (403)

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É Confluence
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {self.confluence_config.base_url}pages/{page_id}
                """
            else:
                error_msg = f"""
‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö CONFLUENCE

–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_details}

URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {self.confluence_config.base_url}pages/{page_id}

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Confluence —Å–µ—Ä–≤–µ—Ä–∞
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –±–∞–∑–æ–≤–æ–≥–æ URL
‚Ä¢ –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                """
                
            return error_msg.strip(), f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (ID: {page_id})"
    
    def _convert_to_api_url(self, page_url: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ API URL"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ URL
        if '/pages/' in page_url:
            page_id = page_url.split('/pages/')[-1].split('/')[0]
        else:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç URL
            parts = page_url.split('/')
            page_id = parts[-1] if parts else ""
        
        if not page_id:
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ URL: {page_url}")
        
        api_url = f"{self.confluence_config.base_url}rest/api/content/{page_id}?expand=body.storage"
        return api_url
    
    def _get_all_child_pages_recursive(self, parent_page_id: str, level: int = 1, max_level: int = 5) -> List[Dict]:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≥–ª—É–±–∏–Ω–µ"""
        all_pages = []
        
        if level > max_level:
            print(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ ({max_level})")
            return all_pages
            
        try:
            auth = (self.confluence_config.username, self.confluence_config.password)
            
            # API –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—á–µ—Ä–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            api_url = f"{self.confluence_config.base_url}rest/api/content/{parent_page_id}/child/page"
            
            response = requests.get(api_url, auth=auth)
            response.raise_for_status()
            
            data = response.json()
            
            for page in data.get('results', []):
                child_id = page['id']
                child_title = page['title']
                
                page_info = {
                    'id': child_id,
                    'title': child_title,
                    'level': level
                }
                
                all_pages.append(page_info)
                print(f"üìÑ –ù–∞–π–¥–µ–Ω–∞ –¥–æ—á–µ—Ä–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (—É—Ä–æ–≤–µ–Ω—å {level}): {child_title}")
                
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                grandchildren = self._get_all_child_pages_recursive(child_id, level + 1, max_level)
                all_pages.extend(grandchildren)
                
            return all_pages
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—á–µ—Ä–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è {parent_page_id}: {str(e)}")
            return []
    
    def _get_page_attachments(self, page_id: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            auth = (self.confluence_config.username, self.confluence_config.password)
            
            # API –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–∏–π
            api_url = f"{self.confluence_config.base_url}rest/api/content/{page_id}/child/attachment"
            
            response = requests.get(api_url, auth=auth)
            response.raise_for_status()
            
            data = response.json()
            
            attachments = []
            for attachment in data.get('results', []):
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                file_type = attachment.get('metadata', {}).get('mediaType', '').lower()
                file_name = attachment['title'].lower()
                
                # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ (–ø–æ MIME —Ç–∏–ø—É –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é)
                supported_types = [
                    'pdf', 'doc', 'docx', 'txt', 'rtf', 'excel', 'spreadsheet', 'xlsx', 'xls',
                    'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                    'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                    'text/plain', 'application/rtf'
                ]
                
                supported_extensions = ['.pdf', '.doc', '.docx', '.txt', '.rtf', '.xls', '.xlsx']
                
                is_supported = (
                    any(ext in file_type for ext in supported_types) or
                    any(file_name.endswith(ext) for ext in supported_extensions)
                )
                
                if is_supported:
                    attachments.append({
                        'id': attachment['id'],
                        'title': attachment['title'],
                        'media_type': file_type,
                        'download_url': attachment['_links']['download']
                    })
                    print(f"üìé –ù–∞–π–¥–µ–Ω –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {attachment['title']} ({file_type})")
                else:
                    print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–∞–π–ª: {attachment['title']} ({file_type})")
                
            return attachments
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_id}: {str(e)}")
            return []
    
    def _extract_attachment_content(self, attachment: Dict) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            auth = (self.confluence_config.username, self.confluence_config.password)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            download_url = f"{self.confluence_config.base_url.rstrip('/')}{attachment['download_url']}"
            response = requests.get(download_url, auth=auth)
            response.raise_for_status()
            
            file_data = response.content
            file_name = attachment['title']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            _, ext = os.path.splitext(file_name.lower())
            
            if ext == '.pdf':
                return self._extract_from_pdf(file_data)
            elif ext in ['.docx', '.doc']:
                return self._extract_from_docx(file_data)
            elif ext in ['.xlsx', '.xls']:
                return self._extract_from_xlsx(file_data)
            elif ext == '.rtf':
                return self._extract_from_rtf(file_data)
            elif ext == '.txt':
                try:
                    return file_data.decode('utf-8')
                except:
                    return file_data.decode('utf-8', errors='ignore')
            else:
                print(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {ext}")
                return ""
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ {attachment['title']}: {str(e)}")
            return ""
    
    def _extract_page_id(self, url: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ URL"""
        if '/pages/' in url:
            return url.split('/pages/')[-1].split('/')[0]
        else:
            parts = url.split('/')
            return parts[-1] if parts else ""
    
    def _count_pages(self, text: str) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Ç–µ–∫—Å—Ç–µ"""
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ - —Å—á–∏—Ç–∞–µ–º –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º —Å—Ç—Ä–∞–Ω–∏—Ü
        page_markers = text.count('--- –°—Ç—Ä–∞–Ω–∏—Ü–∞')
        return max(1, page_markers) if page_markers > 0 else 1 