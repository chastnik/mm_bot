"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –±–æ—Ç–∞ –¥–ª—è Mattermost
"""
import asyncio
import json
import base64
import os
import urllib3
import warnings
from typing import Dict, List, Any, Optional
from mattermostdriver import Driver
from config import Config, PROJECT_TYPES
from document_processor import DocumentProcessor
from llm_analyzer import LLMAnalyzer
from pdf_generator import PDFGenerator
import time
import tempfile
from utils import log_with_timestamp

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class MattermostBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è Mattermost"""
    
    def __init__(self, config: Config):
        self.config = config
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ Mattermost
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–æ—Å—Ç –∏–∑ URL –±–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        mattermost_url = config.mattermost.url
        if mattermost_url.startswith('https://'):
            mattermost_host = mattermost_url[8:]  # –£–±–∏—Ä–∞–µ–º 'https://'
        elif mattermost_url.startswith('http://'):
            mattermost_host = mattermost_url[7:]   # –£–±–∏—Ä–∞–µ–º 'http://'
        else:
            mattermost_host = mattermost_url
        
        # –£–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π —Å–ª–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
        mattermost_host = mattermost_host.rstrip('/')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SSL - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        ssl_verify = getattr(config.mattermost, 'ssl_verify', True)
        
        self.driver = Driver({
            'url': mattermost_host,
            'login_id': config.mattermost.username,
            'password': config.mattermost.password,
            'token': config.mattermost.token,
            'scheme': 'https',
            'port': 443,
            'verify': ssl_verify,
            'timeout': 30,
            'request_timeout': 30,
        })
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.document_processor = DocumentProcessor(config.confluence)
        self.llm_analyzer = LLMAnalyzer(config.llm)
        self.pdf_generator = PDFGenerator()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_sessions = {}
        
        # –ö—ç—à –∫–æ–º–∞–Ω–¥ –∏ –∫–∞–Ω–∞–ª–æ–≤
        self.teams = []
        self.channels = []
        
        # –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
        self.running = False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            log_with_timestamp(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Mattermost: {self.config.mattermost.url}")
            log_with_timestamp(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.config.mattermost.username}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
            try:
                import requests
                url_to_check = self.config.mattermost.url
                if not url_to_check.startswith('http'):
                    url_to_check = f"https://{url_to_check}"
                
                print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞: {url_to_check}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL —á—Ç–æ –∏ –¥–ª—è –¥—Ä–∞–π–≤–µ—Ä–∞
                ssl_verify = getattr(self.config.mattermost, 'ssl_verify', True)
                response = requests.get(url_to_check, timeout=10, verify=ssl_verify)
                print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç. Status: {response.status_code}")
                
                if not ssl_verify:
                    print("‚ö†Ô∏è  SSL –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Mattermost
            self.driver.login()
            print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Mattermost")
            
            self.running = True
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            bot_user = self.driver.users.get_user('me')
            self.bot_user_id = bot_user['id']
            
            print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. ID: {self.bot_user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –∫–∞–Ω–∞–ª—ã –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            await self._initialize_channels()
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            await self._listen_for_messages()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
            print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL Mattermost —Å–µ—Ä–≤–µ—Ä–∞")
            print("   ‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–µ credentials (token/username/password)")
            print("   ‚Ä¢ –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å SSL")
            print("   ‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–æ–º")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.running = False
        try:
            self.driver.logout()
            print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {str(e)}")
    
    async def _initialize_channels(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            print("üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∏ –∫–∞–Ω–∞–ª–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            self.teams = self.driver.teams.get_user_teams(self.bot_user_id)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {len(self.teams)}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
            self.channels = []
            for team in self.teams:
                team_channels = self.driver.channels.get_channels_for_user(self.bot_user_id, team['id'])
                self.channels.extend(team_channels)
                print(f"üì¢ –í –∫–æ–º–∞–Ω–¥–µ '{team['name']}' –Ω–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(team_channels)}")
            
            print(f"‚úÖ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {len(self.channels)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")
            raise
    
    async def _listen_for_messages(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        last_post_time = int(time.time() * 1000)  # –í—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        print(f"üëÇ –ù–∞—á–∏–Ω–∞—é —Å–ª—É—à–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–∏: {last_post_time}")
        
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–∂–¥–æ–º –∫–∞–Ω–∞–ª–µ
                for channel in self.channels:
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
                    posts = self.driver.posts.get_posts_for_channel(
                        channel['id'], 
                        params={'since': last_post_time}
                    )
                    
                    new_posts = [p for p in posts.get('posts', {}).values() 
                                if p['user_id'] != self.bot_user_id and p['create_at'] > last_post_time]
                    
                    if new_posts:
                        print(f"üì® –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ {channel.get('name', channel['id'])}: {len(new_posts)}")
                    
                    for post in new_posts:
                        await self._handle_message(post, channel['id'])
                        last_post_time = max(last_post_time, post['create_at'])
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                await asyncio.sleep(2)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {str(e)}")
                await asyncio.sleep(5)
    
    async def _handle_message(self, post: Dict, channel_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            user_id = post['user_id']
            message = post['message']
            
            log_with_timestamp(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É
            is_for_bot = self._is_message_for_bot(message, post)
            log_with_timestamp(f"ü§ñ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞: {is_for_bot}")
            
            if not is_for_bot:
                return
            
            print(f"‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session = self._get_user_session(user_id)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self._process_user_action(user_id, channel_id, message, post, session)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            await self._send_error_message(channel_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    def _is_message_for_bot(self, message: str, post: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            channel_info = self.driver.channels.get_channel(post['channel_id'])
            channel_type = channel_info.get('type', '')
            
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: –∫–∞–Ω–∞–ª {post['channel_id']}, —Ç–∏–ø: {channel_type}")
            
            # –ü—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É
            if channel_type == 'D':  # Direct message
                print("‚úÖ –≠—Ç–æ –ø—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return True
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞
            bot_user = self.driver.users.get_user('me')
            bot_username = bot_user['username']
            
            print(f"ü§ñ –ò–º—è –±–æ—Ç–∞: {bot_username}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if f"@{bot_username}" in message:
                print("‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞")
                return True
            
            # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∞–¥—Ä–µ—Å–æ–≤–∞–Ω—ã –±–æ—Ç—É
            trigger_words = ['–ø—Ä–∏–≤–µ—Ç', '–Ω–∞—á–∞—Ç—å', 'help', '—Å—Ç–∞—Ä—Ç', 'bot']
            if any(word in message.lower() for word in trigger_words):
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {message}")
                return True
                
            print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª—è –±–æ—Ç–∞")
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–µ–µ)
            return True
    
    def _get_user_session(self, user_id: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = {
                'state': 'initial',
                'project_types': [],
                'documents': [],
                'waiting_for_documents': False
            }
        return self.user_sessions[user_id]
    
    async def _process_user_action(self, user_id: str, channel_id: str, message: str, 
                                 post: Dict, session: Dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        
        state = session['state']
        print(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")
        
        if state == 'initial':
            print("üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
            await self._handle_initial_state(user_id, channel_id, message, session)
        elif state == 'waiting_project_types':
            print("üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞")
            await self._handle_project_type_selection(user_id, channel_id, message, session)
        elif state == 'waiting_documents':
            print("üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            await self._handle_document_submission(user_id, channel_id, message, post, session)
        elif state == 'asking_more_documents':
            print("‚ùì –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö")
            await self._handle_more_documents_question(user_id, channel_id, message, post, session)
        else:
            print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")
            await self._handle_initial_state(user_id, channel_id, message, session)
    
    async def _handle_initial_state(self, user_id: str, channel_id: str, message: str, session: Dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        if "–Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑" in message.lower() or "start" in message.lower():
            await self._ask_project_types(channel_id, session)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ "–Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑"
            await self._send_welcome_message(channel_id)
    
    async def _send_welcome_message(self, channel_id: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        message = """
ü§ñ **–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ò–¢ –ø—Ä–æ–µ–∫—Ç–æ–≤.**

**–Ø —É–º–µ—é:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã (PDF, DOCX, XLSX, RTF)
‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ Confluence
‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF

**üí° –°–æ–≤–µ—Ç –ø–æ Confluence:**
–í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ **–ø–æ–ª–Ω—ã–π URL** –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞:
‚Ä¢ ‚úÖ `https://confluence.1solution.ru/spaces/PROJECT/pages/123456/PageName`
‚Ä¢ ‚úÖ `https://confluence.1solution.ru/x/ABC123`

**–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ:** `–Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑` –∏–ª–∏ `start`
        """
        
        await self._send_message(channel_id, message)
    
    async def _ask_project_types(self, channel_id: str, session: Dict):
        """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞"""
        session['state'] = 'waiting_project_types'
        
        message = """
üìã **–ö–∞–∫–æ–π —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å?**

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–æ–≤:
"""
        
        for code, name in PROJECT_TYPES.items():
            message += f"‚Ä¢ `{code}` - {name}\n"
        
        message += """
**–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞** (–Ω–∞–ø—Ä–∏–º–µ—Ä: `BI` –∏–ª–∏ `BI,DWH` –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∏–ø–æ–≤)
        """
        
        await self._send_message(channel_id, message)
    
    async def _handle_project_type_selection(self, user_id: str, channel_id: str, 
                                           message: str, session: Dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        selected_types = []
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π
        clean_message = message.replace(' ', '').replace(',', ',').upper()
        possible_codes = clean_message.split(',')
        
        for code in possible_codes:
            code = code.strip()
            if code in PROJECT_TYPES:
                selected_types.append(code)
        
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        if not selected_types:
            for code, name in PROJECT_TYPES.items():
                if code.lower() in message.lower() or name.lower() in message.lower():
                    selected_types.append(code)
        
        if not selected_types:
            await self._send_message(channel_id, 
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤.\n\n" +
                "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã:**\n" + 
                "\n".join([f"‚Ä¢ `{code}` - {name}" for code, name in PROJECT_TYPES.items()]) +
                "\n\n**–ü—Ä–∏–º–µ—Ä:** `BI` –∏–ª–∏ `BI,DWH`")
            return
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        selected_types = list(set(selected_types))
        session['project_types'] = selected_types
        session['state'] = 'waiting_documents'
        
        types_text = ", ".join([PROJECT_TYPES[t] for t in selected_types])
        await self._send_message(channel_id, 
            f"‚úÖ **–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–æ–≤:** {types_text}\n\n" +
            "üìÅ **–¢–µ–ø–µ—Ä—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**\n" +
            "‚Ä¢ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã (PDF, DOCX, XLSX, RTF)\n" +
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ Confluence\n" +
            "‚Ä¢ –ú–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n" +
            "üí° **–î–ª—è Confluence:** –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω—ã–π URL –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞")
    
    async def _handle_document_submission(self, user_id: str, channel_id: str, 
                                        message: str, post: Dict, session: Dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        documents = []
        
        # –û—Ç–ª–∞–¥–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ—Å—Ç–∞
        log_with_timestamp(f"üîç –û—Ç–ª–∞–¥–∫–∞ –ø–æ—Å—Ç–∞:")
        log_with_timestamp(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: '{message}'")
        log_with_timestamp(f"   File IDs –≤ –ø–æ—Å—Ç–µ: {post.get('file_ids', [])}")
        log_with_timestamp(f"   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞: {post.get('metadata', {})}")
        log_with_timestamp(f"   –í–ª–æ–∂–µ–Ω–∏—è (attachments): {post.get('attachments', [])}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        file_ids = post.get('file_ids', [])
        file_metadata = post.get('metadata', {}).get('files', [])
        
        if file_ids:
            print(f"üìÅ –ù–∞–π–¥–µ–Ω—ã file_ids: {file_ids}")
            for file_id in file_ids:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Å—Ç–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                    file_info = None
                    for metadata in file_metadata:
                        if metadata.get('id') == file_id:
                            file_info = metadata
                            break
                    
                    # –ï—Å–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –∏—Ö —á–µ—Ä–µ–∑ API
                    if not file_info:
                        file_info = self.driver.files.get_file_metadata(file_id)
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª - –ø–æ–ª—É—á–∞–µ–º Response –æ–±—ä–µ–∫—Ç
                    file_response = self.driver.files.get_file(file_id)
                    file_data = file_response.content  # –ò–∑–≤–ª–µ–∫–∞–µ–º bytes –¥–∞–Ω–Ω—ã–µ
                    
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ({file_info.get('size', 0)} –±–∞–π—Ç)")
                    
                    documents.append({
                        'type': 'file',
                        'name': file_info.get('name', f'file_{file_id}'),
                        'data': file_data,
                        'metadata': file_info
                    })
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_id}: {str(e)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ Confluence
        confluence_urls = self._extract_confluence_urls(message)
        for url in confluence_urls:
            documents.append({
                'type': 'confluence',
                'url': url
            })
        
        if documents:
            session['documents'].extend(documents)
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            session['state'] = 'asking_more_documents'
            
            docs_count = len(session['documents'])
            message_text = f"""
‚úÖ **–ü–æ–ª—É—á–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {docs_count}**

**–ß—Ç–æ –¥–∞–ª—å—à–µ?**
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ `–µ—â–µ` –∏–ª–∏ `–¥–æ–±–∞–≤–∏—Ç—å` - —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ `–∞–Ω–∞–ª–∏–∑` –∏–ª–∏ `–≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã` - —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑
            """
            
            await self._send_message(channel_id, message_text)
        else:
            print(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            print(f"   –§–∞–π–ª—ã: {len(file_ids)} (IDs: {file_ids})")
            print(f"   Confluence URLs: {len(confluence_urls)} (URLs: {confluence_urls})")
            
            confluence_help = """
–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã. 

**–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã:**

üìÅ **–§–∞–π–ª—ã:** –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã –∫ —Å–æ–æ–±—â–µ–Ω–∏—é (PDF, DOCX, XLSX, RTF, TXT)

üîó **Confluence —Å—Ç—Ä–∞–Ω–∏—Ü—ã:** 
‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ **–ø–æ–ª–Ω—ã–π URL** –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: `https://confluence.1solution.ru/spaces/PROJECT/pages/123456/PageName`
‚Ä¢ –ò–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π URL: `https://confluence.1solution.ru/x/ABC123`

‚ùå **–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:**
‚Ä¢ –ù–µ–ø–æ–ª–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã URL
‚Ä¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∏–∑ Confluence
‚Ä¢ –°—Å—ã–ª–∫–∏ –±–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ (http/https)

**–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!**
            """
            await self._send_message(channel_id, confluence_help.strip())
    
    async def _handle_more_documents_question(self, user_id: str, channel_id: str, 
                                            message: str, post: Dict, session: Dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö"""
        if "–¥–æ–±–∞–≤–∏—Ç—å" in message.lower() or "–µ—â–µ" in message.lower():
            session['state'] = 'waiting_documents'
            await self._send_message(channel_id, 
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Å—Å—ã–ª–∫–∏.")
        elif "–≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã" in message.lower() or "–∞–Ω–∞–ª–∏–∑" in message.lower():
            await self._start_analysis(user_id, channel_id, session)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            await self._handle_document_submission(user_id, channel_id, message, post, session)
    
    async def _start_analysis(self, user_id: str, channel_id: str, session: Dict):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        try:
            await self._send_message(channel_id, 
                "üîÑ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
            processed_docs = self.document_processor.process_documents(session['documents'])
            
            if not processed_docs:
                await self._send_message(channel_id, 
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤ –∏ —Å—Å—ã–ª–∫–∏.")
                self._reset_session(session)
                return
            
            await self._send_message(channel_id, 
                f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(processed_docs)}\nü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å –ø–æ–º–æ—â—å—é –ò–ò...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π LLM
            analysis_result = self.llm_analyzer.analyze_documents(
                processed_docs, 
                session['project_types']
            )
            
            if analysis_result.get('error'):
                await self._send_message(channel_id, 
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π LLM. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                self._reset_session(session)
                return
            
            await self._send_message(channel_id, 
                "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF –æ—Ç—á–µ—Ç...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –æ—Ç—á–µ—Ç
            pdf_data = self.pdf_generator.generate_report(
                analysis_result,
                session['project_types'],
                processed_docs
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await self._send_analysis_result(channel_id, analysis_result, pdf_data)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            self._reset_session(session)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
            await self._send_error_message(channel_id, 
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            self._reset_session(session)
    
    async def _send_analysis_result(self, channel_id: str, analysis_result: Dict, pdf_data: bytes):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞"""
        summary = analysis_result.get('summary', {})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏
        artifacts_list = []
        
        # –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
        for artifact in analysis_result.get('found_artifacts', []):
            artifacts_list.append(f"‚úÖ {artifact.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        # –ß–∞—Å—Ç–∏—á–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
        for artifact in analysis_result.get('partially_found_artifacts', []):
            artifacts_list.append(f"üü° {artifact.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        # –ù–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
        for artifact in analysis_result.get('not_found_artifacts', []):
            artifacts_list.append(f"‚ùå {artifact.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        max_artifacts_in_message = 15
        if len(artifacts_list) > max_artifacts_in_message:
            shown_artifacts = artifacts_list[:max_artifacts_in_message]
            remaining_count = len(artifacts_list) - max_artifacts_in_message
            artifacts_text = '\n'.join(shown_artifacts) + f"\n... –∏ –µ—â–µ {remaining_count} –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"
        else:
            artifacts_text = '\n'.join(artifacts_list)
        
        result_text = f"""
üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**

**–°–≤–æ–¥–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: {summary.get('total_artifacts', 0)}
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ: {summary.get('found_count', 0)}
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ: {summary.get('partially_found_count', 0)}
‚Ä¢ –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {summary.get('not_found_count', 0)}

**–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:**
{artifacts_text}

**–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:**
‚úÖ - –ù–∞–π–¥–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é
üü° - –ù–∞–π–¥–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ  
‚ùå - –ù–µ –Ω–∞–π–¥–µ–Ω

**–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –≤ PDF —Ñ–∞–π–ª–µ.**

**–î–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ:** `–Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑` –∏–ª–∏ `–ø—Ä–∏–≤–µ—Ç`
        """
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_file:
            temp_file.write(pdf_data)
            temp_file_path = temp_file.name
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Mattermost
            file_response = self.driver.files.upload_file(
                channel_id=channel_id,
                files={'files': (f'analysis_report_{int(time.time())}.pdf', open(temp_file_path, 'rb'))}
            )
            
            file_id = file_response['file_infos'][0]['id']
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º
            await self._send_message(channel_id, result_text, file_ids=[file_id])
            
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_file_path):
                os.remove(temp_file_path)
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–∫–∏
        await self._send_message(channel_id, "üöÄ **–ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤–æ–º—É –∞–Ω–∞–ª–∏–∑—É?** –ù–∞–ø–∏—à–∏—Ç–µ `–Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑`")
    
    def _extract_confluence_urls(self, message: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ Confluence –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        import re
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ Confluence
        confluence_pattern = r'https?://[^\s]*confluence[^\s]*'
        urls = re.findall(confluence_pattern, message, re.IGNORECASE)
        
        return urls
    
    def _reset_session(self, session: Dict):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        session.update({
            'state': 'initial',
            'project_types': [],
            'documents': [],
            'waiting_for_documents': False
        })
    
    async def _send_message(self, channel_id: str, message: str, attachments: List = None, file_ids: List = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª"""
        try:
            print(f"üì§ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª {channel_id}: '{message[:50]}...'")
            
            post_data = {
                'channel_id': channel_id,
                'message': message
            }
            
            if attachments:
                post_data['props'] = {'attachments': attachments}
                print(f"üìé –° –≤–ª–æ–∂–µ–Ω–∏—è–º–∏: {len(attachments)}")
            
            if file_ids:
                post_data['file_ids'] = file_ids
                print(f"üìÅ –° —Ñ–∞–π–ª–∞–º–∏: {len(file_ids)}")
            
            result = self.driver.posts.create_post(post_data)
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ. ID –ø–æ—Å—Ç–∞: {result.get('id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            print(f"   –ö–∞–Ω–∞–ª: {channel_id}")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {message[:100]}")
            raise
    
    async def _send_error_message(self, channel_id: str, error_text: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        message = f"‚ùå **–û—à–∏–±–∫–∞:** {error_text}"
        await self._send_message(channel_id, message) 